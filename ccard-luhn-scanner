#!/usr/bin/env python3
# created 2017-09-11 brandon gillespie

import luhn
import os
import sys
import re

# verify a legitimate #  (http://www.regular-expressions.info/creditcard.html)
crx_vend = re.compile(r'^([3456]\d{12,}|(2131|1800)\d{9,})')

def syntax():
    sys.exit("Syntax: " + sys.argv[0] + " {text file}")

def valid_card(card_number):
    if not crx_vend.search(card_number):
        return False
    return luhn_checksum(card_number) == 0

# borrowed from wikipedia
def luhn_checksum(card_number):
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = 0
    checksum += sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10

if len(sys.argv) is not 2 or not os.path.isfile(sys.argv[1]):
    syntax()

# find a string of digits that might be a card number, with spaces or other things allowed
crx = re.compile(r'\b(?:\d[ -]*?){13,16}\b')
srx = re.compile(r"[^\d]")
linenbr = 0
with open(sys.argv[1]) as infile:
    for line in infile:
        orig_line = line
        linenbr += 1
        match = crx.search(line)
        while match:
            if match:
                cnum = srx.sub("", match.group(0)) # strip to the base number
                verified = valid_card(cnum)
                if verified:
                    print("line# {}: found {}:".format(linenbr, cnum))
                    print(" {}".format(orig_line))
                    match = False
                    break

                line = crx.sub("<<redacted>>", line, 1) # strip it from line
                match = crx.search(line)
